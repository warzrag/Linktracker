generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String
  username                String                  @unique
  name                    String?
  image                   String?
  bio                     String?
  bannerImage             String?
  theme                   String                  @default("gradient")
  primaryColor            String                  @default("#3b82f6")
  secondaryColor          String                  @default("#8b5cf6")
  backgroundImage         String?
  avatarId                String?
  bannerId                String?
  twitterUrl              String?
  instagramUrl            String?
  linkedinUrl             String?
  youtubeUrl              String?
  tiktokUrl               String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  analyticsEvents         AnalyticsEvent[]
  analyticsSummary        AnalyticsSummary[]
  clicks                  Click[]
  customDomains           CustomDomain[]
  files                   File[]
  folders                 Folder[]
  linkSchedules           LinkSchedule[]
  links                   Link[]
  notificationPreferences NotificationPreference?
  notifications           Notification[]
  passwordProtections     PasswordProtection[]
  pushSubscriptions       PushSubscription[]
  templates               Template[]
  userProfile             UserProfile?
  userTheme               UserTheme?
  banner                  File?                   @relation("UserBanner", fields: [bannerId], references: [id])
  avatar                  File?                   @relation("UserAvatar", fields: [avatarId], references: [id])

  @@map("users")
}

model Link {
  id                 String              @id @default(cuid())
  userId             String
  slug               String              @unique
  title              String
  description        String?
  color              String?
  icon               String?
  coverImage         String?
  profileImage       String?
  coverId            String?
  fontFamily         String?
  borderRadius       String?
  backgroundColor    String?
  textColor          String?
  isActive           Boolean             @default(true)
  order              Int                 @default(0)
  clicks             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  folderId           String?
  analyticsEvents    AnalyticsEvent[]
  analyticsSummary   AnalyticsSummary[]
  clickEvents        Click[]
  linkSchedule       LinkSchedule?
  folder             Folder?             @relation(fields: [folderId], references: [id])
  cover              File?               @relation("LinkCover", fields: [coverId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  multiLinks         MultiLink[]
  passwordAttempts   PasswordAttempt[]
  passwordProtection PasswordProtection?

  @@map("links")
}

model MultiLink {
  id           String   @id @default(cuid())
  parentLinkId String
  title        String
  url          String
  description  String?
  icon         String?
  order        Int      @default(0)
  clicks       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  parentLink   Link     @relation(fields: [parentLinkId], references: [id], onDelete: Cascade)

  @@map("multi_links")
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  userId    String
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  device    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("clicks")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  icon        String?
  userId      String
  parentId    String?
  order       Int      @default(0)
  isExpanded  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[] @relation("FolderHierarchy")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       Link[]

  @@map("folders")
}

model File {
  id                 String     @id @default(cuid())
  filename           String
  originalName       String
  mimeType           String
  size               Int
  url                String
  userId             String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkCovers         Link[]     @relation("LinkCover")
  templateThumbnails Template[] @relation("TemplateThumbnail")
  userBanners        User[]     @relation("UserBanner")
  userAvatars        User[]     @relation("UserAvatar")

  @@map("files")
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  linkId      String
  userId      String
  eventType   String
  ip          String?
  userAgent   String?
  referer     String?
  country     String?
  region      String?
  city        String?
  latitude    Float?
  longitude   Float?
  device      String?
  browser     String?
  os          String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId, createdAt])
  @@index([userId, createdAt])
  @@map("analytics_events")
}

model AnalyticsSummary {
  id         String   @id @default(cuid())
  linkId     String
  userId     String
  date       DateTime
  clicks     Int      @default(0)
  views      Int      @default(0)
  topCountry String?
  topDevice  String?
  topBrowser String?
  topReferer String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link       Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([linkId, date])
  @@map("analytics_summary")
}

model Template {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  layout       String
  colors       String
  fonts        String
  spacing      String
  animations   String?
  thumbnailId  String?
  cssCode      String?
  isPremium    Boolean       @default(false)
  isPublic     Boolean       @default(true)
  authorId     String?
  usageCount   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User?         @relation(fields: [authorId], references: [id])
  thumbnail    File?         @relation("TemplateThumbnail", fields: [thumbnailId], references: [id])
  userProfiles UserProfile[]

  @@map("templates")
}

model UserProfile {
  id         String    @id @default(cuid())
  userId     String    @unique
  templateId String?
  customCSS  String?
  layout     String?
  seo        String?
  domain     String?
  favicon    String?
  analytics  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  template   Template? @relation(fields: [templateId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserTheme {
  id          String   @id @default(cuid())
  userId      String   @unique
  preference  String   @default("system")
  customTheme String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_themes")
}

model PasswordProtection {
  id              String    @id @default(cuid())
  linkId          String    @unique
  userId          String
  password        String
  hint            String?
  maxAttempts     Int       @default(5)
  lockoutDuration Int       @default(3600)
  attempts        Int       @default(0)
  lockedUntil     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  link            Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("password_protections")
}

model PasswordAttempt {
  id        String   @id @default(cuid())
  linkId    String
  ip        String
  success   Boolean
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId, ip, createdAt])
  @@map("password_attempts")
}

model LinkSchedule {
  id             String         @id @default(cuid())
  linkId         String         @unique
  userId         String
  startDate      DateTime?
  endDate        DateTime?
  timezone       String         @default("UTC")
  isRecurring    Boolean        @default(false)
  recurrenceRule String?
  actionOnStart  String?
  actionOnEnd    String?
  notifyStart    Boolean        @default(false)
  notifyEnd      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  link           Link           @relation(fields: [linkId], references: [id], onDelete: Cascade)
  scheduledJobs  ScheduledJob[]

  @@map("link_schedules")
}

model ScheduledJob {
  id           String       @id @default(cuid())
  scheduleId   String
  jobType      String
  scheduledFor DateTime
  executed     Boolean      @default(false)
  executedAt   DateTime?
  error        String?
  createdAt    DateTime     @default(now())
  schedule     LinkSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduledFor, executed])
  @@map("scheduled_jobs")
}

model CustomDomain {
  id         String    @id @default(cuid())
  userId     String
  domain     String    @unique
  subdomain  String?
  verified   Boolean   @default(false)
  dnsRecords String?
  sslEnabled Boolean   @default(false)
  sslExpiry  DateTime?
  redirectTo String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("custom_domains")
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  type         String
  title        String
  message      String
  data         String?
  read         Boolean   @default(false)
  readAt       DateTime?
  inApp        Boolean   @default(true)
  email        Boolean   @default(false)
  push         Boolean   @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  clickNotifications    Boolean  @default(true)
  scheduleNotifications Boolean  @default(true)
  systemNotifications   Boolean  @default(true)
  marketingEmails       Boolean  @default(false)
  emailEnabled          Boolean  @default(true)
  pushEnabled           Boolean  @default(true)
  smsEnabled            Boolean  @default(false)
  digestFrequency       String   @default("daily")
  quietHours            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  keys      String
  userAgent String?
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}
