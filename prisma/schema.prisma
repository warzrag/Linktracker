generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  username  String   @unique
  name      String?
  image     String?
  
  // Personnalisation du profil public
  bio         String?  // Description/biographie
  bannerImage String?  // Image de bannière
  theme       String   @default("gradient") // gradient, solid, image
  primaryColor String  @default("#3b82f6") // Couleur principale
  secondaryColor String @default("#8b5cf6") // Couleur secondaire
  backgroundImage String? // Image de fond personnalisée
  
  // Réseaux sociaux
  twitterUrl   String?
  instagramUrl String?
  linkedinUrl  String?
  youtubeUrl   String?
  tiktokUrl    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  links Link[]
  clicks Click[]

  @@map("users")
}

model Link {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  slug        String   @unique
  title       String
  description String?
  
  // Visual customization
  color       String?  // HEX color for button background
  icon        String?  // Emoji or icon identifier
  coverImage  String?  // URL to cover image
  
  // Metadata
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  clicks      Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clickEvents Click[]
  multiLinks  MultiLink[] // Toujours des sous-liens

  @@map("links")
}

model MultiLink {
  id          String   @id @default(cuid())
  parentLinkId String
  parentLink  Link     @relation(fields: [parentLinkId], references: [id], onDelete: Cascade)
  
  title       String
  url         String
  description String?
  icon        String?
  order       Int      @default(0)
  clicks      Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("multi_links")
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  device    String?
  
  createdAt DateTime @default(now())

  @@map("clicks")
}